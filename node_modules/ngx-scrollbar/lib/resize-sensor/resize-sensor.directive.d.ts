import { EventEmitter, AfterContentInit, OnDestroy, NgZone } from '@angular/core';
import { Platform } from '@angular/cdk/platform';
import { NgScrollbar } from '../ng-scrollbar';
interface ResizeObserverSize {
    readonly inlineSize: number;
    readonly blockSize: number;
}
interface ResizeObserverEntry {
    readonly target: Element;
    readonly contentRect: DOMRectReadOnly;
    readonly borderBoxSize?: ReadonlyArray<ResizeObserverSize>;
    readonly contentBoxSize?: ReadonlyArray<ResizeObserverSize>;
    readonly devicePixelContentBoxSize?: ReadonlyArray<ResizeObserverSize>;
}
export declare class ResizeSensor implements AfterContentInit, OnDestroy {
    private zone;
    private platform;
    private scrollbar;
    /** Debounce interval for emitting the changes. */
    get debounce(): number | undefined;
    set debounce(value: number | undefined);
    private _debounce;
    /** Whether ResizeObserver is disabled. */
    get disabled(): any;
    set disabled(value: any);
    private _disabled;
    private _currentSubscription;
    private _resizeObserver;
    event: EventEmitter<readonly ResizeObserverEntry[]>;
    constructor(zone: NgZone, platform: Platform, scrollbar: NgScrollbar);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    private _subscribe;
    private _unsubscribe;
}
export {};
