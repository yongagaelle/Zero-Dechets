import { Directive, Input, Output, EventEmitter, NgZone } from '@angular/core';
import { Platform } from '@angular/cdk/platform';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { Observable } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { NgScrollbar } from '../ng-scrollbar';
export class ResizeSensor {
    constructor(zone, platform, scrollbar) {
        this.zone = zone;
        this.platform = platform;
        this.scrollbar = scrollbar;
        this._disabled = false;
        this._currentSubscription = null;
        this.event = new EventEmitter();
        if (!scrollbar) {
            throw new Error('[NgScrollbar Resize Sensor Directive]: Host element must be an NgScrollbar component.');
        }
    }
    /** Debounce interval for emitting the changes. */
    get debounce() {
        return this._debounce;
    }
    set debounce(value) {
        this._debounce = coerceNumberProperty(value);
        this._subscribe();
    }
    /** Whether ResizeObserver is disabled. */
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this._disabled ? this._unsubscribe() : this._subscribe();
    }
    ngAfterContentInit() {
        if (!this._currentSubscription && !this._disabled) {
            this._subscribe();
        }
    }
    ngOnDestroy() {
        this._unsubscribe();
    }
    _subscribe() {
        this._unsubscribe();
        if (this.platform.isBrowser) {
            const stream = new Observable((observer) => {
                this._resizeObserver = new ResizeObserver((e) => observer.next(e));
                this._resizeObserver.observe(this.scrollbar.viewport.nativeElement);
                if (this.scrollbar.viewport.contentWrapperElement) {
                    this._resizeObserver.observe(this.scrollbar.viewport.contentWrapperElement);
                }
            });
            this.zone.runOutsideAngular(() => {
                this._currentSubscription = (this._debounce ? stream.pipe(debounceTime(this._debounce)) : stream).subscribe(this.event);
            });
        }
    }
    _unsubscribe() {
        var _a, _b;
        (_a = this._resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
        (_b = this._currentSubscription) === null || _b === void 0 ? void 0 : _b.unsubscribe();
    }
}
ResizeSensor.decorators = [
    { type: Directive, args: [{ selector: '[resizeSensor]' },] }
];
ResizeSensor.ctorParameters = () => [
    { type: NgZone },
    { type: Platform },
    { type: NgScrollbar }
];
ResizeSensor.propDecorators = {
    debounce: [{ type: Input, args: ['sensorDebounce',] }],
    disabled: [{ type: Input, args: ['sensorDisabled',] }],
    event: [{ type: Output, args: ['resizeSensor',] }]
};
//# sourceMappingURL=data:application/json;base64,