import { Inject, Injectable, Optional } from '@angular/core';
import { getRtlScrollAxisType } from '@angular/cdk/platform';
import { NG_SCROLLBAR_OPTIONS } from '../ng-scrollbar.model';
import * as i0 from "@angular/core";
import * as i1 from "../ng-scrollbar.model";
const defaultOptions = {
    viewClass: '',
    trackClass: '',
    thumbClass: '',
    track: 'vertical',
    appearance: 'compact',
    visibility: 'native',
    position: 'native',
    pointerEventsMethod: 'viewport',
    trackClickScrollDuration: 300,
    minThumbSize: 20,
    windowResizeDebounce: 0,
    sensorDebounce: 0,
    scrollAuditTime: 0,
    viewportPropagateMouseMove: true,
    autoHeightDisabled: true,
    autoWidthDisabled: true,
    sensorDisabled: false,
    pointerEventsDisabled: false
};
export class ScrollbarManager {
    constructor(options) {
        this.globalOptions = options ? Object.assign(Object.assign({}, defaultOptions), options) : defaultOptions;
        this.rtlScrollAxisType = getRtlScrollAxisType();
    }
}
ScrollbarManager.ɵprov = i0.ɵɵdefineInjectable({ factory: function ScrollbarManager_Factory() { return new ScrollbarManager(i0.ɵɵinject(i1.NG_SCROLLBAR_OPTIONS, 8)); }, token: ScrollbarManager, providedIn: "root" });
ScrollbarManager.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
ScrollbarManager.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_SCROLLBAR_OPTIONS,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYmFyLW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsYmFyL3NyYy9saWIvdXRpbHMvc2Nyb2xsYmFyLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxvQkFBb0IsRUFBcUIsTUFBTSx1QkFBdUIsQ0FBQztBQUNoRixPQUFPLEVBQXFCLG9CQUFvQixFQUFzQixNQUFNLHVCQUF1QixDQUFDOzs7QUFFcEcsTUFBTSxjQUFjLEdBQXNCO0lBQ3hDLFNBQVMsRUFBRSxFQUFFO0lBQ2IsVUFBVSxFQUFFLEVBQUU7SUFDZCxVQUFVLEVBQUUsRUFBRTtJQUNkLEtBQUssRUFBRSxVQUFVO0lBQ2pCLFVBQVUsRUFBRSxTQUFTO0lBQ3JCLFVBQVUsRUFBRSxRQUFRO0lBQ3BCLFFBQVEsRUFBRSxRQUFRO0lBQ2xCLG1CQUFtQixFQUFFLFVBQVU7SUFDL0Isd0JBQXdCLEVBQUUsR0FBRztJQUM3QixZQUFZLEVBQUUsRUFBRTtJQUNoQixvQkFBb0IsRUFBRSxDQUFDO0lBQ3ZCLGNBQWMsRUFBRSxDQUFDO0lBQ2pCLGVBQWUsRUFBRSxDQUFDO0lBQ2xCLDBCQUEwQixFQUFFLElBQUk7SUFDaEMsa0JBQWtCLEVBQUUsSUFBSTtJQUN4QixpQkFBaUIsRUFBRSxJQUFJO0lBQ3ZCLGNBQWMsRUFBRSxLQUFLO0lBQ3JCLHFCQUFxQixFQUFFLEtBQUs7Q0FDN0IsQ0FBQztBQUdGLE1BQU0sT0FBTyxnQkFBZ0I7SUFLM0IsWUFBc0QsT0FBMkI7UUFDL0UsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsQ0FBQyxpQ0FBTSxjQUFjLEdBQUssT0FBTyxFQUFHLENBQUMsQ0FBQyxjQUFjLENBQUM7UUFFbEYsSUFBSSxDQUFDLGlCQUFpQixHQUFHLG9CQUFvQixFQUFFLENBQUM7SUFDbEQsQ0FBQzs7OztZQVZGLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7Ozs0Q0FNbkIsUUFBUSxZQUFJLE1BQU0sU0FBQyxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBnZXRSdGxTY3JvbGxBeGlzVHlwZSwgUnRsU2Nyb2xsQXhpc1R5cGUgfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xuaW1wb3J0IHsgSVNjcm9sbGJhck9wdGlvbnMsIE5HX1NDUk9MTEJBUl9PUFRJT05TLCBOZ1Njcm9sbGJhck9wdGlvbnMgfSBmcm9tICcuLi9uZy1zY3JvbGxiYXIubW9kZWwnO1xuXG5jb25zdCBkZWZhdWx0T3B0aW9uczogSVNjcm9sbGJhck9wdGlvbnMgPSB7XG4gIHZpZXdDbGFzczogJycsXG4gIHRyYWNrQ2xhc3M6ICcnLFxuICB0aHVtYkNsYXNzOiAnJyxcbiAgdHJhY2s6ICd2ZXJ0aWNhbCcsXG4gIGFwcGVhcmFuY2U6ICdjb21wYWN0JyxcbiAgdmlzaWJpbGl0eTogJ25hdGl2ZScsXG4gIHBvc2l0aW9uOiAnbmF0aXZlJyxcbiAgcG9pbnRlckV2ZW50c01ldGhvZDogJ3ZpZXdwb3J0JyxcbiAgdHJhY2tDbGlja1Njcm9sbER1cmF0aW9uOiAzMDAsXG4gIG1pblRodW1iU2l6ZTogMjAsXG4gIHdpbmRvd1Jlc2l6ZURlYm91bmNlOiAwLFxuICBzZW5zb3JEZWJvdW5jZTogMCxcbiAgc2Nyb2xsQXVkaXRUaW1lOiAwLFxuICB2aWV3cG9ydFByb3BhZ2F0ZU1vdXNlTW92ZTogdHJ1ZSxcbiAgYXV0b0hlaWdodERpc2FibGVkOiB0cnVlLFxuICBhdXRvV2lkdGhEaXNhYmxlZDogdHJ1ZSxcbiAgc2Vuc29yRGlzYWJsZWQ6IGZhbHNlLFxuICBwb2ludGVyRXZlbnRzRGlzYWJsZWQ6IGZhbHNlXG59O1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIFNjcm9sbGJhck1hbmFnZXIge1xuICByZWFkb25seSBnbG9iYWxPcHRpb25zOiBJU2Nyb2xsYmFyT3B0aW9ucztcblxuICByZWFkb25seSBydGxTY3JvbGxBeGlzVHlwZTogUnRsU2Nyb2xsQXhpc1R5cGU7XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChOR19TQ1JPTExCQVJfT1BUSU9OUykgb3B0aW9uczogTmdTY3JvbGxiYXJPcHRpb25zKSB7XG4gICAgdGhpcy5nbG9iYWxPcHRpb25zID0gb3B0aW9ucyA/IHsgLi4uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfSA6IGRlZmF1bHRPcHRpb25zO1xuXG4gICAgdGhpcy5ydGxTY3JvbGxBeGlzVHlwZSA9IGdldFJ0bFNjcm9sbEF4aXNUeXBlKCk7XG4gIH1cbn1cbiJdfQ==