import { NgZone, Directive } from '@angular/core';
import { Platform } from '@angular/cdk/platform';
import { fromEvent, merge, Subject } from 'rxjs';
import { distinctUntilChanged, map, switchMap, takeUntil, tap } from 'rxjs/operators';
import { NgScrollbar } from '../ng-scrollbar';
import { isWithinBounds, stopPropagation } from './common';
// @dynamic
export class Scrollbar {
    constructor(el, cmp, platform, document, zone) {
        this.el = el;
        this.cmp = cmp;
        this.platform = platform;
        this.document = document;
        this.zone = zone;
        // Stream that emits to unsubscribe from all streams
        this.destroyed = new Subject();
    }
    /**
     * Activate scrollbar pointer events
     */
    activatePointerEvents() {
        // Stream that emits when scrollbar thumb is dragged
        let thumbDragEvent;
        // Stream that emits when scrollbar track is clicked
        let trackClickEvent;
        // Stream that emits when scrollbar track is hovered
        let trackHoveredEvent;
        // Set the method used for the pointer events option
        if (this.cmp.pointerEventsMethod === 'viewport') {
            // Pointer events using the viewport
            this.viewportTrackClicked = new Subject();
            this.viewportThumbClicked = new Subject();
            // Activate the pointer events of the viewport directive
            this.cmp.viewport.activatePointerEvents(this.cmp.viewportPropagateMouseMove, this.destroyed);
            // Set streams
            thumbDragEvent = this.viewportThumbClicked;
            trackClickEvent = this.viewportTrackClicked;
            trackHoveredEvent = this.cmp.viewport.hovered.pipe(
            // Check if track is hovered
            map((e) => isWithinBounds(e, this.el.getBoundingClientRect())), distinctUntilChanged(), 
            // Enable / disable text selection
            tap((hovered) => this.document.onselectstart = hovered ? () => false : null));
            this.cmp.viewport.clicked.pipe(tap((e) => {
                if (e) {
                    if (isWithinBounds(e, this.thumb.clientRect)) {
                        this.viewportThumbClicked.next(e);
                    }
                    else if (isWithinBounds(e, this.track.clientRect)) {
                        this.cmp.setClicked(true);
                        this.viewportTrackClicked.next(e);
                    }
                }
                else {
                    this.cmp.setClicked(false);
                }
            }), takeUntil(this.destroyed)).subscribe();
        }
        else {
            // Pointer events method is using 'scrollbar'
            thumbDragEvent = this.thumb.clicked;
            trackClickEvent = this.track.clicked;
            trackHoveredEvent = this.hovered;
        }
        return merge(
        // Activate scrollbar hovered event
        trackHoveredEvent.pipe(tap((e) => this.setHovered(e))), 
        // Activate scrollbar thumb drag event
        thumbDragEvent.pipe(switchMap((e) => this.thumb.dragged(e))), 
        // Activate scrollbar track click event
        trackClickEvent.pipe(switchMap((e) => this.track.onTrackClicked(e, this.thumb.size, this.viewportScrollSize))));
    }
    // Stream that emits when the track element is hovered
    get hovered() {
        const mouseEnter = fromEvent(this.el, 'mouseenter', { passive: true }).pipe(stopPropagation(), map(() => true));
        const mouseLeave = fromEvent(this.el, 'mouseleave', { passive: true }).pipe(stopPropagation(), map(() => false));
        return merge(mouseEnter, mouseLeave);
    }
    ngOnInit() {
        this.zone.runOutsideAngular(() => {
            // Activate pointer events on Desktop only
            if (!(this.platform.IOS || this.platform.ANDROID) && !this.cmp.pointerEventsDisabled) {
                this.activatePointerEvents().pipe(takeUntil(this.destroyed)).subscribe();
            }
            // Update scrollbar thumb when viewport is scrolled and when scrollbar component is updated
            merge(this.cmp.scrolled, this.cmp.updated).pipe(tap(() => { var _a; return (_a = this.thumb) === null || _a === void 0 ? void 0 : _a.update(); }), takeUntil(this.destroyed)).subscribe();
        });
    }
    ngOnDestroy() {
        this.destroyed.next();
        this.destroyed.complete();
        // Clean up viewport streams if used
        if (this.viewportThumbClicked && this.viewportTrackClicked) {
            this.viewportTrackClicked.complete();
            this.viewportThumbClicked.complete();
        }
    }
}
Scrollbar.decorators = [
    { type: Directive }
];
Scrollbar.ctorParameters = () => [
    { type: HTMLElement },
    { type: NgScrollbar },
    { type: Platform },
    { type: undefined },
    { type: NgZone }
];
//# sourceMappingURL=data:application/json;base64,