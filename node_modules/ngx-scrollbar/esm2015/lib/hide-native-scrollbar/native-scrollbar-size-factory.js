import { Inject, Injectable } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Platform } from '@angular/cdk/platform';
import { BehaviorSubject, fromEvent } from 'rxjs';
import { debounceTime, tap, distinctUntilChanged, map } from 'rxjs/operators';
import { ScrollbarManager } from '../utils/scrollbar-manager';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../utils/scrollbar-manager";
import * as i3 from "@angular/cdk/platform";
export class NativeScrollbarSizeFactory {
    constructor(document, manager, platform) {
        this.document = document;
        this.manager = manager;
        this.platform = platform;
        this._scrollbarSize = new BehaviorSubject(this.getNativeScrollbarSize());
        this.scrollbarSize = this._scrollbarSize.asObservable();
        // Calculate native scrollbar size on window resize event, because the size changes if use zoomed in/out
        if (platform.isBrowser) {
            fromEvent(this.document.defaultView, 'resize', { passive: true }).pipe(debounceTime(this.manager.globalOptions.windowResizeDebounce), map(() => this.getNativeScrollbarSize()), distinctUntilChanged(), tap((size) => this._scrollbarSize.next(size))).subscribe();
        }
    }
    /**
     * Get native scrollbar size
     */
    getNativeScrollbarSize() {
        // Avoid executing browser code in server side rendering
        if (!this.platform.isBrowser) {
            return 0;
        }
        // Hide iOS browsers native scrollbar
        if (this.platform.IOS) {
            return 6;
        }
        const box = this.document.createElement('div');
        box.className = 'ng-scrollbar-measure';
        box.style.left = 0;
        box.style.overflow = 'scroll';
        box.style.position = 'fixed';
        box.style.top = '-9999px';
        this.document.body.appendChild(box);
        const size = box.getBoundingClientRect().right;
        this.document.body.removeChild(box);
        return size;
    }
}
NativeScrollbarSizeFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function NativeScrollbarSizeFactory_Factory() { return new NativeScrollbarSizeFactory(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i2.ScrollbarManager), i0.ɵɵinject(i3.Platform)); }, token: NativeScrollbarSizeFactory, providedIn: "root" });
NativeScrollbarSizeFactory.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
NativeScrollbarSizeFactory.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ScrollbarManager },
    { type: Platform }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLXNjcm9sbGJhci1zaXplLWZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsYmFyL3NyYy9saWIvaGlkZS1uYXRpdmUtc2Nyb2xsYmFyL25hdGl2ZS1zY3JvbGxiYXItc2l6ZS1mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDakQsT0FBTyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQUUsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7Ozs7O0FBRzlELE1BQU0sT0FBTywwQkFBMEI7SUFJckMsWUFBc0MsUUFBYSxFQUMvQixPQUF5QixFQUN6QixRQUFrQjtRQUZBLGFBQVEsR0FBUixRQUFRLENBQUs7UUFDL0IsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7UUFDekIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUxyQixtQkFBYyxHQUFHLElBQUksZUFBZSxDQUFTLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLENBQUM7UUFDN0Ysa0JBQWEsR0FBdUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUtyRSx3R0FBd0c7UUFDeEcsSUFBSSxRQUFRLENBQUMsU0FBUyxFQUFFO1lBQ3RCLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ3BFLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxFQUM3RCxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUMsRUFDeEMsb0JBQW9CLEVBQUUsRUFDdEIsR0FBRyxDQUFDLENBQUMsSUFBWSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUN0RCxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ2Y7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSyxzQkFBc0I7UUFDNUIsd0RBQXdEO1FBQ3hELElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRTtZQUM1QixPQUFPLENBQUMsQ0FBQztTQUNWO1FBQ0QscUNBQXFDO1FBQ3JDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUU7WUFDckIsT0FBTyxDQUFDLENBQUM7U0FDVjtRQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9DLEdBQUcsQ0FBQyxTQUFTLEdBQUcsc0JBQXNCLENBQUM7UUFDdkMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUM5QixHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFDN0IsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDO1FBQzFCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQyxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxLQUFLLENBQUM7UUFDL0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7OztZQXpDRixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7NENBS25CLE1BQU0sU0FBQyxRQUFRO1lBUHJCLGdCQUFnQjtZQUhoQixRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBQbGF0Zm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wbGF0Zm9ybSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIGZyb21FdmVudCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGVib3VuY2VUaW1lLCB0YXAsIGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBTY3JvbGxiYXJNYW5hZ2VyIH0gZnJvbSAnLi4vdXRpbHMvc2Nyb2xsYmFyLW1hbmFnZXInO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIE5hdGl2ZVNjcm9sbGJhclNpemVGYWN0b3J5IHtcbiAgcHJpdmF0ZSByZWFkb25seSBfc2Nyb2xsYmFyU2l6ZSA9IG5ldyBCZWhhdmlvclN1YmplY3Q8bnVtYmVyPih0aGlzLmdldE5hdGl2ZVNjcm9sbGJhclNpemUoKSk7XG4gIHNjcm9sbGJhclNpemU6IE9ic2VydmFibGU8bnVtYmVyPiA9IHRoaXMuX3Njcm9sbGJhclNpemUuYXNPYnNlcnZhYmxlKCk7XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogYW55LFxuICAgICAgICAgICAgICBwcml2YXRlIG1hbmFnZXI6IFNjcm9sbGJhck1hbmFnZXIsXG4gICAgICAgICAgICAgIHByaXZhdGUgcGxhdGZvcm06IFBsYXRmb3JtKSB7XG4gICAgLy8gQ2FsY3VsYXRlIG5hdGl2ZSBzY3JvbGxiYXIgc2l6ZSBvbiB3aW5kb3cgcmVzaXplIGV2ZW50LCBiZWNhdXNlIHRoZSBzaXplIGNoYW5nZXMgaWYgdXNlIHpvb21lZCBpbi9vdXRcbiAgICBpZiAocGxhdGZvcm0uaXNCcm93c2VyKSB7XG4gICAgICBmcm9tRXZlbnQodGhpcy5kb2N1bWVudC5kZWZhdWx0VmlldywgJ3Jlc2l6ZScsIHsgcGFzc2l2ZTogdHJ1ZSB9KS5waXBlKFxuICAgICAgICBkZWJvdW5jZVRpbWUodGhpcy5tYW5hZ2VyLmdsb2JhbE9wdGlvbnMud2luZG93UmVzaXplRGVib3VuY2UpLFxuICAgICAgICBtYXAoKCkgPT4gdGhpcy5nZXROYXRpdmVTY3JvbGxiYXJTaXplKCkpLFxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICAgICB0YXAoKHNpemU6IG51bWJlcikgPT4gdGhpcy5fc2Nyb2xsYmFyU2l6ZS5uZXh0KHNpemUpKVxuICAgICAgKS5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IG5hdGl2ZSBzY3JvbGxiYXIgc2l6ZVxuICAgKi9cbiAgcHJpdmF0ZSBnZXROYXRpdmVTY3JvbGxiYXJTaXplKCk6IG51bWJlciB7XG4gICAgLy8gQXZvaWQgZXhlY3V0aW5nIGJyb3dzZXIgY29kZSBpbiBzZXJ2ZXIgc2lkZSByZW5kZXJpbmdcbiAgICBpZiAoIXRoaXMucGxhdGZvcm0uaXNCcm93c2VyKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgLy8gSGlkZSBpT1MgYnJvd3NlcnMgbmF0aXZlIHNjcm9sbGJhclxuICAgIGlmICh0aGlzLnBsYXRmb3JtLklPUykge1xuICAgICAgcmV0dXJuIDY7XG4gICAgfVxuICAgIGNvbnN0IGJveCA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgYm94LmNsYXNzTmFtZSA9ICduZy1zY3JvbGxiYXItbWVhc3VyZSc7XG4gICAgYm94LnN0eWxlLmxlZnQgPSAwO1xuICAgIGJveC5zdHlsZS5vdmVyZmxvdyA9ICdzY3JvbGwnO1xuICAgIGJveC5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gICAgYm94LnN0eWxlLnRvcCA9ICctOTk5OXB4JztcbiAgICB0aGlzLmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYm94KTtcbiAgICBjb25zdCBzaXplID0gYm94LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnJpZ2h0O1xuICAgIHRoaXMuZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChib3gpO1xuICAgIHJldHVybiBzaXplO1xuICB9XG59XG4iXX0=