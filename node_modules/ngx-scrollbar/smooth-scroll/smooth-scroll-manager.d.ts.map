{"version":3,"file":"smooth-scroll-manager.d.ts","sources":["smooth-scroll-manager.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { SmoothScrollElement, SmoothScrollToElementOptions, SmoothScrollToOptions } from './smooth-scroll.model';\nexport declare class SmoothScrollManager {\n    private _document;\n    private _platform;\n    private readonly _defaultOptions;\n    private _onGoingScrolls;\n    private get _w();\n    /**\n     * Timing method\n     */\n    private get _now();\n    constructor(_document: any, _platform: object, customDefaultOptions: SmoothScrollToOptions);\n    /**\n     * changes scroll position inside an element\n     */\n    private _scrollElement;\n    /**\n     * Handles a given parameter of type HTMLElement, ElementRef or selector\n     */\n    private _getElement;\n    /**\n     * Initializes a destroyer stream, re-initializes it if the element is already being scrolled\n     */\n    private _initSmoothScroll;\n    /**\n     * Checks if smooth scroll has reached, cleans up the smooth scroll stream and resolves its promise\n     */\n    private _isFinished;\n    /**\n     * Terminates an ongoing smooth scroll\n     */\n    private _interrupted;\n    /**\n     * Deletes the destroyer function, runs if the smooth scroll has finished or interrupted\n     */\n    private _destroy;\n    /**\n     * A function called recursively that, given a context, steps through scrolling\n     */\n    private _step;\n    private _applyScrollToOptions;\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param scrollable element\n     * @param customOptions specified the offsets to scroll to.\n     */\n    scrollTo(scrollable: SmoothScrollElement, customOptions: SmoothScrollToOptions): Promise<void>;\n    /**\n     * Scroll to element by reference or selector\n     */\n    scrollToElement(scrollable: SmoothScrollElement, target: SmoothScrollElement, customOptions?: SmoothScrollToElementOptions): Promise<void>;\n}\n"]}