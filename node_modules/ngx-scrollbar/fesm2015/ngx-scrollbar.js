import * as i0 from '@angular/core';
import { Directive, ElementRef, InjectionToken, Injectable, Optional, Inject, EventEmitter, Component, ChangeDetectionStrategy, NgZone, ChangeDetectorRef, Input, Output, ViewChild, ContentChild, RendererStyleFlags2, Renderer2, NgModule } from '@angular/core';
import * as i1 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import { Directionality, BidiModule } from '@angular/cdk/bidi';
import { PortalModule } from '@angular/cdk/portal';
import * as i3 from '@angular/cdk/platform';
import { getRtlScrollAxisType, Platform, PlatformModule } from '@angular/cdk/platform';
import { SmoothScrollManager, SmoothScrollModule } from 'ngx-scrollbar/smooth-scroll';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { Observable, fromEvent, merge, Subject, BehaviorSubject, Subscription, EMPTY, of, animationFrameScheduler } from 'rxjs';
import { tap, map, takeUntil, switchMap, pluck, pairwise, filter, auditTime, debounceTime, distinctUntilChanged, mergeMap } from 'rxjs/operators';

function preventSelection(doc) {
    return tap(() => {
        doc.onselectstart = () => false;
    });
}
function enableSelection(doc) {
    return tap(() => {
        doc.onselectstart = null;
    });
}
function stopPropagation() {
    return tap((e) => e.stopPropagation());
}
/**
 * Check if pointer is within scrollbar bounds
 */
function isWithinBounds(e, rect) {
    return (e.clientX >= rect.left &&
        e.clientX <= rect.left + rect.width &&
        e.clientY >= rect.top &&
        e.clientY <= rect.top + rect.height);
}

class ScrollViewport {
    constructor(viewPort) {
        this.viewPort = viewPort;
        this.nativeElement = viewPort.nativeElement;
    }
    // Get viewport size, clientHeight or clientWidth
    get clientHeight() {
        return this.nativeElement.clientHeight;
    }
    get clientWidth() {
        return this.nativeElement.clientWidth;
    }
    get scrollHeight() {
        return this.nativeElement.scrollHeight;
    }
    get scrollWidth() {
        return this.nativeElement.scrollWidth;
    }
    // Get viewport scroll offset, scrollTop or scrollLeft
    get scrollTop() {
        return this.nativeElement.scrollTop;
    }
    get scrollLeft() {
        return this.nativeElement.scrollLeft;
    }
    // Get the available scrollable size
    get scrollMaxX() {
        return this.scrollWidth - this.clientWidth;
    }
    get scrollMaxY() {
        return this.scrollHeight - this.clientHeight;
    }
    get contentHeight() {
        var _a;
        return ((_a = this.contentWrapperElement) === null || _a === void 0 ? void 0 : _a.clientHeight) || 0;
    }
    get contentWidth() {
        var _a;
        return ((_a = this.contentWrapperElement) === null || _a === void 0 ? void 0 : _a.clientWidth) || 0;
    }
    /**
     * Activate viewport pointer events such as 'hovered' and 'clicked' events
     */
    activatePointerEvents(propagate, destroyed) {
        this.hovered = new Observable((subscriber) => {
            // Stream that emits when pointer is moved over the viewport (used to set the hovered state)
            const mouseMoveStream = fromEvent(this.nativeElement, 'mousemove', { passive: true });
            const mouseMove = propagate ? mouseMoveStream : mouseMoveStream.pipe(stopPropagation());
            // Stream that emits when pointer leaves the viewport (used to remove the hovered state)
            const mouseLeave = fromEvent(this.nativeElement, 'mouseleave').pipe(map(() => false));
            merge(mouseMove, mouseLeave).pipe(tap((e) => subscriber.next(e)), takeUntil(destroyed)).subscribe();
        });
        this.clicked = new Observable((subscriber) => {
            const mouseDown = fromEvent(this.nativeElement, 'mousedown', { passive: true }).pipe(tap((e) => subscriber.next(e)));
            const mouseUp = fromEvent(this.nativeElement, 'mouseup', { passive: true }).pipe(tap(() => subscriber.next(false)));
            mouseDown.pipe(switchMap(() => mouseUp), takeUntil(destroyed)).subscribe();
        });
    }
    /**
     * Set this directive as a non-functional wrapper, called when a custom viewport is used
     */
    setAsWrapper() {
        // In this case the default viewport and the default content wrapper will act as a mask
        this.nativeElement.className = 'ng-native-scrollbar-hider ng-scroll-layer';
        if (this.nativeElement.firstElementChild) {
            this.nativeElement.firstElementChild.className = 'ng-scroll-layer';
        }
    }
    /**
     * Set this directive as  the viewport, called when no custom viewport is used
     */
    setAsViewport(customClassName) {
        this.nativeElement.className = `ng-native-scrollbar-hider ng-scroll-viewport ${customClassName}`;
        // Check if the custom viewport has only one child and set it as the content wrapper
        if (this.nativeElement.firstElementChild) {
            this.contentWrapperElement = this.nativeElement.firstElementChild;
            this.contentWrapperElement.classList.add('ng-scroll-content');
        }
    }
    /**
     * Scroll viewport vertically
     */
    scrollYTo(value) {
        this.nativeElement.scrollTop = value;
    }
    /**
     * Scroll viewport horizontally
     */
    scrollXTo(value) {
        this.nativeElement.scrollLeft = value;
    }
}
ScrollViewport.decorators = [
    { type: Directive, args: [{
                selector: '[scrollViewport]'
            },] }
];
ScrollViewport.ctorParameters = () => [
    { type: ElementRef }
];

const NG_SCROLLBAR_OPTIONS = new InjectionToken('NG_SCROLLBAR_OPTIONS');

const defaultOptions = {
    viewClass: '',
    trackClass: '',
    thumbClass: '',
    track: 'vertical',
    appearance: 'compact',
    visibility: 'native',
    position: 'native',
    pointerEventsMethod: 'viewport',
    trackClickScrollDuration: 300,
    minThumbSize: 20,
    windowResizeDebounce: 0,
    sensorDebounce: 0,
    scrollAuditTime: 0,
    viewportPropagateMouseMove: true,
    autoHeightDisabled: true,
    autoWidthDisabled: true,
    sensorDisabled: false,
    pointerEventsDisabled: false
};
class ScrollbarManager {
    constructor(options) {
        this.globalOptions = options ? Object.assign(Object.assign({}, defaultOptions), options) : defaultOptions;
        this.rtlScrollAxisType = getRtlScrollAxisType();
    }
}
ScrollbarManager.ɵprov = i0.ɵɵdefineInjectable({ factory: function ScrollbarManager_Factory() { return new ScrollbarManager(i0.ɵɵinject(NG_SCROLLBAR_OPTIONS, 8)); }, token: ScrollbarManager, providedIn: "root" });
ScrollbarManager.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
ScrollbarManager.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_SCROLLBAR_OPTIONS,] }] }
];

class NgScrollbar {
    constructor(el, zone, changeDetectorRef, dir, smoothScroll, manager) {
        this.el = el;
        this.zone = zone;
        this.changeDetectorRef = changeDetectorRef;
        this.dir = dir;
        this.smoothScroll = smoothScroll;
        this.manager = manager;
        this._disabled = false;
        this._sensorDisabled = this.manager.globalOptions.sensorDisabled;
        this._pointerEventsDisabled = this.manager.globalOptions.pointerEventsDisabled;
        this._autoHeightDisabled = this.manager.globalOptions.autoHeightDisabled;
        this._autoWidthDisabled = this.manager.globalOptions.autoWidthDisabled;
        this._viewportPropagateMouseMove = this.manager.globalOptions.viewportPropagateMouseMove;
        /** A class forwarded to scrollable viewport element */
        this.viewClass = this.manager.globalOptions.viewClass;
        /** A class forwarded to the scrollbar track element */
        this.trackClass = this.manager.globalOptions.trackClass;
        /** A class forwarded to the scrollbar thumb element */
        this.thumbClass = this.manager.globalOptions.thumbClass;
        /** Minimum scrollbar thumb size */
        this.minThumbSize = this.manager.globalOptions.minThumbSize;
        /** The duration which the scrolling takes to reach its target when scrollbar rail is clicked */
        this.trackClickScrollDuration = this.manager.globalOptions.trackClickScrollDuration;
        /**
         * Sets the pointer events method
         * Use viewport pointer events  to handle dragging and track click (This makes scrolling work when mouse is over the scrollbar)
         * Use scrollbar pointer events to handle dragging and track click
         */
        this.pointerEventsMethod = this.manager.globalOptions.pointerEventsMethod;
        /**
         * Sets the supported scroll track of the viewport, there are 3 options:
         *
         * - `vertical` Use both vertical and horizontal scrollbar
         * - `horizontal` Use both vertical and horizontal scrollbar
         * - `all` Use both vertical and horizontal scrollbar
         */
        this.track = this.manager.globalOptions.track;
        /**
         * When to show the scrollbar, and there are 3 options:
         *
         * - `native` (default) Scrollbar will be visible when viewport is scrollable like with native scrollbar
         * - `hover` Scrollbars are hidden by default, only visible on scrolling or hovering
         * - `always` Scrollbars are always shown even if the viewport is not scrollable
         */
        this.visibility = this.manager.globalOptions.visibility;
        /**
         *  Sets the appearance of the scrollbar, there are 2 options:
         *
         * - `standard` (default) scrollbar space will be reserved just like with native scrollbar.
         * - `compact` scrollbar doesn't reserve any space, they are placed over the viewport.
         */
        this.appearance = this.manager.globalOptions.appearance;
        /**
         * Sets the position of each scrollbar, there are 4 options:
         *
         * - `native` (Default) Use the default position like in native scrollbar.
         * - `invertY` Inverts vertical scrollbar position
         * - `invertX` Inverts Horizontal scrollbar position
         * - `invertAll` Inverts both scrollbar positions
         */
        this.position = this.manager.globalOptions.position;
        /** Debounce interval for detecting changes via ResizeObserver */
        this.sensorDebounce = this.manager.globalOptions.sensorDebounce;
        /** Scroll Audit Time */
        this.scrollAuditTime = this.manager.globalOptions.scrollAuditTime;
        /** Steam that emits when scrollbar is updated */
        this.updated = new EventEmitter();
        /** Set of attributes added on the scrollbar wrapper */
        this.state = {};
        /** Stream that destroys components' observables */
        this.destroyed = new Subject();
    }
    /** Disable custom scrollbar and switch back to native scrollbar */
    get disabled() {
        return this._disabled;
    }
    set disabled(disabled) {
        this._disabled = coerceBooleanProperty(disabled);
    }
    /** Whether ResizeObserver is disabled */
    get sensorDisabled() {
        return this._sensorDisabled;
    }
    set sensorDisabled(disabled) {
        this._sensorDisabled = coerceBooleanProperty(disabled);
    }
    /** A flag used to enable/disable the scrollbar thumb dragged event */
    get pointerEventsDisabled() {
        return this._pointerEventsDisabled;
    }
    set pointerEventsDisabled(disabled) {
        this._pointerEventsDisabled = coerceBooleanProperty(disabled);
    }
    /** Enable viewport mousemove event propagation (only when pointerEventsMethod="viewport") */
    get viewportPropagateMouseMove() {
        return this._viewportPropagateMouseMove;
    }
    set viewportPropagateMouseMove(disabled) {
        this._viewportPropagateMouseMove = coerceBooleanProperty(disabled);
    }
    /** Disable auto-height */
    get autoHeightDisabled() {
        return this._autoHeightDisabled;
    }
    set autoHeightDisabled(disabled) {
        this._autoHeightDisabled = coerceBooleanProperty(disabled);
    }
    /** Disable auto-width */
    get autoWidthDisabled() {
        return this._autoWidthDisabled;
    }
    set autoWidthDisabled(disabled) {
        this._autoWidthDisabled = coerceBooleanProperty(disabled);
    }
    get nativeElement() {
        return this.el.nativeElement;
    }
    /**
     * Update local state with each change detection
     */
    updateState() {
        let verticalUsed = false;
        let horizontalUsed = false;
        let isVerticallyScrollable = false;
        let isHorizontallyScrollable = false;
        // Check if vertical scrollbar should be displayed
        if (this.track === 'all' || this.track === 'vertical') {
            isVerticallyScrollable = this.viewport.scrollHeight > this.viewport.clientHeight;
            verticalUsed = this.visibility === 'always' || isVerticallyScrollable;
        }
        // Check if horizontal scrollbar should be displayed
        if (this.track === 'all' || this.track === 'horizontal') {
            isHorizontallyScrollable = this.viewport.scrollWidth > this.viewport.clientWidth;
            horizontalUsed = this.visibility === 'always' || isHorizontallyScrollable;
        }
        // Update inner wrapper attributes
        this.setState({
            position: this.position,
            track: this.track,
            appearance: this.appearance,
            visibility: this.visibility,
            deactivated: this.disabled,
            dir: this.dir.value,
            pointerEventsMethod: this.pointerEventsMethod,
            verticalUsed,
            horizontalUsed,
            isVerticallyScrollable,
            isHorizontallyScrollable
        });
    }
    setState(state) {
        this.state = Object.assign(Object.assign({}, this.state), state);
        this.changeDetectorRef.detectChanges();
    }
    getScrolledByDirection(property) {
        let event;
        return this.scrolled.pipe(tap((e) => event = e), pluck('target', property), pairwise(), filter(([prev, curr]) => prev !== curr), map(() => event));
    }
    /**
     * Set hovered state if a scrollbar is being hovered
     */
    setHovered(hovered) {
        this.zone.run(() => this.setState(Object.assign({}, hovered)));
    }
    /**
     * Set dragging state if a scrollbar is being dragged
     */
    setDragging(dragging) {
        this.zone.run(() => this.setState(Object.assign({}, dragging)));
    }
    /**
     * Set clicked state if a scrollbar track is being click
     */
    setClicked(scrollbarClicked) {
        this.zone.run(() => this.setState({ scrollbarClicked }));
    }
    ngOnInit() {
        // Set the viewport based on user choice
        this.zone.runOutsideAngular(() => {
            if (this.customViewPort) {
                this.viewport = this.customViewPort;
                this.defaultViewPort.setAsWrapper();
            }
            else {
                this.viewport = this.defaultViewPort;
            }
            // Activate the selected viewport
            this.viewport.setAsViewport(this.viewClass);
            let scrollStream = fromEvent(this.viewport.nativeElement, 'scroll', { passive: true });
            // Throttle scroll event if 'scrollAuditTime' is set
            scrollStream = this.scrollAuditTime ? scrollStream.pipe(auditTime(this.scrollAuditTime)) : scrollStream;
            // Initialize scroll streams
            this.scrolled = scrollStream.pipe(takeUntil(this.destroyed));
            this.verticalScrolled = this.getScrolledByDirection('scrollTop');
            this.horizontalScrolled = this.getScrolledByDirection('scrollLeft');
        });
    }
    ngOnChanges(changes) {
        // Update only when the viewport is initialized
        if (this.viewport) {
            this.update();
        }
    }
    ngAfterViewInit() {
        // Initial update
        this.update();
        // Update on dir changes
        this.dir.change.pipe(tap(() => this.update()), takeUntil(this.destroyed)).subscribe();
    }
    ngOnDestroy() {
        this.destroyed.next();
        this.destroyed.complete();
    }
    /**
     * Update local state and the internal scrollbar controls
     */
    update() {
        if (!this.autoHeightDisabled) {
            this.updateHeight();
        }
        if (!this.autoWidthDisabled) {
            this.updateWidth();
        }
        // Re-evaluate the state after setting height or width
        this.updateState();
        this.updated.next();
    }
    /**
     * Smooth scroll functions
     */
    scrollTo(options) {
        return this.smoothScroll.scrollTo(this.viewport.nativeElement, options);
    }
    /**
     * Scroll to element by reference or selector
     */
    scrollToElement(target, options) {
        return this.smoothScroll.scrollToElement(this.viewport.nativeElement, target, options);
    }
    updateHeight() {
        // Auto-height: Set component height to content height
        if (this.appearance === 'standard' && this.scrollbarX) {
            // if scrollbar-x is displayed in standard mode
            this.nativeElement.style.height = `${this.viewport.contentHeight + this.scrollbarX.nativeElement.clientHeight}px`;
        }
        else {
            this.nativeElement.style.height = `${this.viewport.contentHeight}px`;
        }
    }
    updateWidth() {
        // Auto-width: Set component minWidth to content width
        if (this.appearance === 'standard' && this.scrollbarY) {
            // if scrollbar-y is displayed in standard mode
            this.nativeElement.style.width = `${this.viewport.contentWidth + this.scrollbarY.nativeElement.clientWidth}px`;
        }
        else {
            this.nativeElement.style.width = `${this.viewport.contentWidth}px`;
        }
    }
}
NgScrollbar.decorators = [
    { type: Component, args: [{
                selector: 'ng-scrollbar',
                exportAs: 'ngScrollbar',
                template: "<div class=\"ng-scrollbar-wrapper\" [ngAttr]=\"state\">\n  <div class=\"ng-scroll-viewport-wrapper\"\n       (resizeSensor)=\"update()\"\n       [sensorDebounce]=\"sensorDebounce\"\n       [sensorDisabled]=\"sensorDisabled\">\n    <div scrollViewport\n         hideNativeScrollbar>\n      <div>\n        <ng-content></ng-content>\n      </div>\n    </div>\n  </div>\n  <ng-container *ngIf=\"!disabled\">\n    <scrollbar-x #scrollbarX\n                 *ngIf=\"state.horizontalUsed\"\n                 [attr.scrollable]=\"state.isHorizontallyScrollable\"\n                 [attr.fit]=\"state.verticalUsed\">\n    </scrollbar-x>\n    <scrollbar-y #scrollbarY\n                 *ngIf=\"state.verticalUsed\"\n                 [attr.scrollable]=\"state.isVerticallyScrollable\"\n                 [attr.fit]=\"state.horizontalUsed\">\n    </scrollbar-y>\n  </ng-container>\n</div>\n\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: { '[class.ng-scrollbar]': 'true' },
                styles: ["::ng-deep .ng-scrollbar-measure{scrollbar-width:none;-ms-overflow-style:none}::ng-deep .ng-scrollbar-measure::-webkit-scrollbar{display:none}:host{--scrollbar-border-radius:7px;--scrollbar-padding:4px;--scrollbar-track-color:transparent;--scrollbar-thumb-color:rgba(0,0,0,0.2);--scrollbar-thumb-hover-color:var(--scrollbar-thumb-color);--scrollbar-size:5px;--scrollbar-hover-size:var(--scrollbar-size);--scrollbar-overscroll-behavior:initial;--scrollbar-transition-duration:400ms;--scrollbar-transition-delay:800ms;--scrollbar-thumb-transition:height ease-out 150ms,width ease-out 150ms;--scrollbar-track-transition:height ease-out 150ms,width ease-out 150ms;display:block;position:relative;height:100%;max-height:100%;max-width:100%;box-sizing:content-box!important}:host>.ng-scrollbar-wrapper{--scrollbar-total-size:calc(var(--scrollbar-size) + var(--scrollbar-padding) * 2);--vertical-scrollbar-size:var(--scrollbar-size);--horizontal-scrollbar-size:var(--scrollbar-size);--vertical-scrollbar-total-size:calc(var(--vertical-scrollbar-size) + var(--scrollbar-padding) * 2);--horizontal-scrollbar-total-size:calc(var(--horizontal-scrollbar-size) + var(--scrollbar-padding) * 2)}:host>.ng-scrollbar-wrapper[verticalDragging=true],:host>.ng-scrollbar-wrapper[verticalHovered=true]{--vertical-scrollbar-size:var(--scrollbar-hover-size);--vertical-scrollbar-total-size:calc(var(--vertical-scrollbar-size) + var(--scrollbar-padding) * 2);cursor:default}:host>.ng-scrollbar-wrapper[horizontalDragging=true],:host>.ng-scrollbar-wrapper[horizontalHovered=true]{--horizontal-scrollbar-size:var(--scrollbar-hover-size);--horizontal-scrollbar-total-size:calc(var(--horizontal-scrollbar-size) + var(--scrollbar-padding) * 2);cursor:default}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=ltr][pointerEventsMethod=scrollbar]>.ng-scroll-viewport-wrapper{left:0;right:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=ltr][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=ltr][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport{padding-right:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=rtl][pointerEventsMethod=scrollbar]>.ng-scroll-viewport-wrapper{left:var(--scrollbar-total-size);right:0}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=rtl][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][dir=rtl][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport{padding-left:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=ltr][pointerEventsMethod=scrollbar]>.ng-scroll-viewport-wrapper,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=ltr][pointerEventsMethod=scrollbar]>.ng-scroll-viewport-wrapper{left:var(--scrollbar-total-size);right:0}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=ltr][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=ltr][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=ltr][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=ltr][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport{padding-left:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=rtl][pointerEventsMethod=scrollbar]>.ng-scroll-viewport-wrapper,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=rtl][pointerEventsMethod=scrollbar]>.ng-scroll-viewport-wrapper{left:0;right:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=rtl][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertAll][dir=rtl][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=rtl][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][verticalUsed=true][position=invertY][dir=rtl][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport{padding-right:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][pointerEventsMethod=scrollbar]>.ng-scroll-viewport-wrapper{top:0;bottom:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport{padding-bottom:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertAll][pointerEventsMethod=scrollbar]>.ng-scroll-viewport-wrapper,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertX][pointerEventsMethod=scrollbar]>.ng-scroll-viewport-wrapper{top:var(--scrollbar-total-size);bottom:0}:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertAll][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertAll][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertX][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false][appearance=standard][horizontalUsed=true][position=invertX][pointerEventsMethod=viewport]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport{padding-top:var(--scrollbar-total-size)}:host>.ng-scrollbar-wrapper[deactivated=false]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[deactivated=false]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport{scrollbar-width:none;-ms-overflow-style:none}:host>.ng-scrollbar-wrapper[deactivated=false]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport::-webkit-scrollbar,:host>.ng-scrollbar-wrapper[deactivated=false]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport::-webkit-scrollbar{display:none}:host>.ng-scrollbar-wrapper[deactivated=false][horizontalUsed=true]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-native-scrollbar-hider,:host>.ng-scrollbar-wrapper[deactivated=false][horizontalUsed=true]>.ng-scroll-viewport-wrapper>.ng-native-scrollbar-hider{bottom:var(--native-scrollbar-size)}:host>.ng-scrollbar-wrapper[deactivated=false][verticalUsed=true]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-native-scrollbar-hider,:host>.ng-scrollbar-wrapper[deactivated=false][verticalUsed=true]>.ng-scroll-viewport-wrapper>.ng-native-scrollbar-hider{left:0;right:var(--native-scrollbar-size)}:host>.ng-scrollbar-wrapper[deactivated=false][verticalUsed=true][dir=rtl]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-native-scrollbar-hider,:host>.ng-scrollbar-wrapper[deactivated=false][verticalUsed=true][dir=rtl]>.ng-scroll-viewport-wrapper>.ng-native-scrollbar-hider{right:0;left:var(--native-scrollbar-size)}:host>.ng-scrollbar-wrapper[deactivated=false][visibility=hover]>.scrollbar-control{opacity:0;transition-property:opacity;transition-duration:var(--scrollbar-transition-duration);transition-delay:var(--scrollbar-transition-delay)}:host>.ng-scrollbar-wrapper[deactivated=false][visibility=hover]:active>.scrollbar-control,:host>.ng-scrollbar-wrapper[deactivated=false][visibility=hover]:focus>.scrollbar-control,:host>.ng-scrollbar-wrapper[deactivated=false][visibility=hover]:hover>.scrollbar-control{opacity:1;transition-duration:var(--scrollbar-transition-duration);transition-delay:0ms}:host>.ng-scrollbar-wrapper[horizontalUsed=true]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[horizontalUsed=true]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport{overflow-x:auto;overflow-y:hidden}:host>.ng-scrollbar-wrapper[verticalUsed=true]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[verticalUsed=true]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport{overflow-y:auto;overflow-x:hidden}:host>.ng-scrollbar-wrapper[verticalUsed=true][horizontalUsed=true]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,:host>.ng-scrollbar-wrapper[verticalUsed=true][horizontalUsed=true]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport{overflow:auto}.ng-scroll-viewport-wrapper{overflow:hidden}.ng-scroll-viewport{-webkit-overflow-scrolling:touch;contain:strict;will-change:scroll-position;overscroll-behavior:var(--scrollbar-overscroll-behavior)}::ng-deep .ng-scroll-content{position:relative!important;display:inline-block;min-width:100%}.ng-scroll-layer,.ng-scroll-viewport-wrapper,.ng-scrollbar-wrapper,::ng-deep .ng-scroll-viewport{position:absolute;left:0;right:0;top:0;bottom:0}", "::ng-deep .ng-scrollbar-wrapper[pointerEventsMethod=viewport]>.scrollbar-control{pointer-events:none}::ng-deep .ng-scrollbar-wrapper[horizontalDragging=true]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,::ng-deep .ng-scrollbar-wrapper[horizontalDragging=true]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,::ng-deep .ng-scrollbar-wrapper[scrollbarClicked=true]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,::ng-deep .ng-scrollbar-wrapper[scrollbarClicked=true]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport,::ng-deep .ng-scrollbar-wrapper[verticalDragging=true]>.ng-scroll-viewport-wrapper>*>*>::ng-deep.ng-scroll-viewport,::ng-deep .ng-scrollbar-wrapper[verticalDragging=true]>.ng-scroll-viewport-wrapper>.ng-scroll-viewport{-webkit-user-select:none;-moz-user-select:none;user-select:none}::ng-deep .ng-scrollbar-wrapper>.scrollbar-control{position:absolute;display:flex;justify-content:center;align-items:center;transition:var(--scrollbar-track-transition)}::ng-deep .ng-scrollbar-wrapper>.scrollbar-control[scrollable=false] .ng-scrollbar-thumb{display:none}::ng-deep .ng-scrollbar-track{height:100%;width:100%;z-index:1;border-radius:var(--scrollbar-border-radius);background-color:var(--scrollbar-track-color);overflow:hidden;transition:var(--scrollbar-track-transition);cursor:default}::ng-deep .ng-scrollbar-thumb{box-sizing:border-box;position:relative;border-radius:inherit;background-color:var(--scrollbar-thumb-color);transform:translateZ(0);transition:var(--scrollbar-thumb-transition)}"]
            },] }
];
NgScrollbar.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: ChangeDetectorRef },
    { type: Directionality },
    { type: SmoothScrollManager },
    { type: ScrollbarManager }
];
NgScrollbar.propDecorators = {
    disabled: [{ type: Input }],
    sensorDisabled: [{ type: Input }],
    pointerEventsDisabled: [{ type: Input }],
    viewportPropagateMouseMove: [{ type: Input }],
    autoHeightDisabled: [{ type: Input }],
    autoWidthDisabled: [{ type: Input }],
    viewClass: [{ type: Input }],
    trackClass: [{ type: Input }],
    thumbClass: [{ type: Input }],
    minThumbSize: [{ type: Input }],
    trackClickScrollDuration: [{ type: Input }],
    pointerEventsMethod: [{ type: Input }],
    track: [{ type: Input }],
    visibility: [{ type: Input }],
    appearance: [{ type: Input }],
    position: [{ type: Input }],
    sensorDebounce: [{ type: Input }],
    scrollAuditTime: [{ type: Input }],
    updated: [{ type: Output }],
    scrollbarY: [{ type: ViewChild, args: ['scrollbarY', { read: ElementRef },] }],
    scrollbarX: [{ type: ViewChild, args: ['scrollbarX', { read: ElementRef },] }],
    defaultViewPort: [{ type: ViewChild, args: [ScrollViewport, { static: true },] }],
    customViewPort: [{ type: ContentChild, args: [ScrollViewport, { static: true },] }]
};

class NativeScrollbarSizeFactory {
    constructor(document, manager, platform) {
        this.document = document;
        this.manager = manager;
        this.platform = platform;
        this._scrollbarSize = new BehaviorSubject(this.getNativeScrollbarSize());
        this.scrollbarSize = this._scrollbarSize.asObservable();
        // Calculate native scrollbar size on window resize event, because the size changes if use zoomed in/out
        if (platform.isBrowser) {
            fromEvent(this.document.defaultView, 'resize', { passive: true }).pipe(debounceTime(this.manager.globalOptions.windowResizeDebounce), map(() => this.getNativeScrollbarSize()), distinctUntilChanged(), tap((size) => this._scrollbarSize.next(size))).subscribe();
        }
    }
    /**
     * Get native scrollbar size
     */
    getNativeScrollbarSize() {
        // Avoid executing browser code in server side rendering
        if (!this.platform.isBrowser) {
            return 0;
        }
        // Hide iOS browsers native scrollbar
        if (this.platform.IOS) {
            return 6;
        }
        const box = this.document.createElement('div');
        box.className = 'ng-scrollbar-measure';
        box.style.left = 0;
        box.style.overflow = 'scroll';
        box.style.position = 'fixed';
        box.style.top = '-9999px';
        this.document.body.appendChild(box);
        const size = box.getBoundingClientRect().right;
        this.document.body.removeChild(box);
        return size;
    }
}
NativeScrollbarSizeFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function NativeScrollbarSizeFactory_Factory() { return new NativeScrollbarSizeFactory(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(ScrollbarManager), i0.ɵɵinject(i3.Platform)); }, token: NativeScrollbarSizeFactory, providedIn: "root" });
NativeScrollbarSizeFactory.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
NativeScrollbarSizeFactory.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ScrollbarManager },
    { type: Platform }
];

class HideNativeScrollbar {
    constructor(el, renderer, hideNativeScrollbar) {
        this.renderer = renderer;
        this.hideNativeScrollbar = hideNativeScrollbar;
        this._subscriber = Subscription.EMPTY;
        this._subscriber = hideNativeScrollbar.scrollbarSize.subscribe((size) => {
            this.renderer.setStyle(el.nativeElement, '--native-scrollbar-size', `-${size}px`, RendererStyleFlags2.DashCase);
        });
    }
    ngOnDestroy() {
        this._subscriber.unsubscribe();
    }
}
HideNativeScrollbar.decorators = [
    { type: Directive, args: [{
                selector: '[hideNativeScrollbar]'
            },] }
];
HideNativeScrollbar.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NativeScrollbarSizeFactory }
];

class NgAttr {
    constructor(el) {
        this.el = el;
    }
    set ngAttr(attrs) {
        for (const [key, value] of Object.entries(attrs)) {
            this.el.nativeElement.setAttribute(key, value);
        }
    }
}
NgAttr.decorators = [
    { type: Directive, args: [{ selector: '[ngAttr]' },] }
];
NgAttr.ctorParameters = () => [
    { type: ElementRef }
];
NgAttr.propDecorators = {
    ngAttr: [{ type: Input }]
};

class ResizeSensor {
    constructor(zone, platform, scrollbar) {
        this.zone = zone;
        this.platform = platform;
        this.scrollbar = scrollbar;
        this._disabled = false;
        this._currentSubscription = null;
        this.event = new EventEmitter();
        if (!scrollbar) {
            throw new Error('[NgScrollbar Resize Sensor Directive]: Host element must be an NgScrollbar component.');
        }
    }
    /** Debounce interval for emitting the changes. */
    get debounce() {
        return this._debounce;
    }
    set debounce(value) {
        this._debounce = coerceNumberProperty(value);
        this._subscribe();
    }
    /** Whether ResizeObserver is disabled. */
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this._disabled ? this._unsubscribe() : this._subscribe();
    }
    ngAfterContentInit() {
        if (!this._currentSubscription && !this._disabled) {
            this._subscribe();
        }
    }
    ngOnDestroy() {
        this._unsubscribe();
    }
    _subscribe() {
        this._unsubscribe();
        if (this.platform.isBrowser) {
            const stream = new Observable((observer) => {
                this._resizeObserver = new ResizeObserver((e) => observer.next(e));
                this._resizeObserver.observe(this.scrollbar.viewport.nativeElement);
                if (this.scrollbar.viewport.contentWrapperElement) {
                    this._resizeObserver.observe(this.scrollbar.viewport.contentWrapperElement);
                }
            });
            this.zone.runOutsideAngular(() => {
                this._currentSubscription = (this._debounce ? stream.pipe(debounceTime(this._debounce)) : stream).subscribe(this.event);
            });
        }
    }
    _unsubscribe() {
        var _a, _b;
        (_a = this._resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
        (_b = this._currentSubscription) === null || _b === void 0 ? void 0 : _b.unsubscribe();
    }
}
ResizeSensor.decorators = [
    { type: Directive, args: [{ selector: '[resizeSensor]' },] }
];
ResizeSensor.ctorParameters = () => [
    { type: NgZone },
    { type: Platform },
    { type: NgScrollbar }
];
ResizeSensor.propDecorators = {
    debounce: [{ type: Input, args: ['sensorDebounce',] }],
    disabled: [{ type: Input, args: ['sensorDisabled',] }],
    event: [{ type: Output, args: ['resizeSensor',] }]
};

// @dynamic
class TrackAdapter {
    constructor(cmp, trackElement, document) {
        this.cmp = cmp;
        this.trackElement = trackElement;
        this.document = document;
    }
    // Stream that emits when the track element is clicked
    get clicked() {
        const mouseDown = fromEvent(this.trackElement, 'mousedown', { passive: true }).pipe(stopPropagation(), preventSelection(this.document));
        const mouseup = fromEvent(this.document, 'mouseup', { passive: true }).pipe(stopPropagation(), enableSelection(this.document), switchMap(() => EMPTY));
        return merge(mouseDown, mouseup);
    }
    // Get track client rect
    get clientRect() {
        return this.trackElement.getBoundingClientRect();
    }
    /**
     * Stream that emits when scrollbar track is clicked
     */
    onTrackClicked(e, thumbSize, scrollSize) {
        return of(e).pipe(pluck(this.pageProperty), 
        // Calculate scrollTo position
        map((pageOffset) => {
            const clickOffset = pageOffset - this.offset;
            const offset = clickOffset - (thumbSize / 2);
            const ratio = offset / this.size;
            return ratio * scrollSize;
        }), 
        // Smooth scroll to position
        tap((value) => {
            this.cmp.scrollTo(Object.assign(Object.assign({}, this.mapToScrollToOption(value)), { duration: coerceNumberProperty(this.cmp.trackClickScrollDuration) }));
        }));
    }
}
TrackAdapter.decorators = [
    { type: Directive }
];
TrackAdapter.ctorParameters = () => [
    { type: NgScrollbar },
    { type: HTMLElement },
    { type: undefined }
];

// @dynamic
class ThumbAdapter {
    constructor(cmp, track, thumbElement, document) {
        this.cmp = cmp;
        this.track = track;
        this.thumbElement = thumbElement;
        this.document = document;
        // Stream that emits dragging state
        this._dragging = new Subject();
        this.dragging = this._dragging.pipe(distinctUntilChanged());
    }
    get trackMax() {
        return this.track.size - this.size;
    }
    // Get thumb client rect
    get clientRect() {
        return this.thumbElement.getBoundingClientRect();
    }
    // Stream that emits when scrollbar thumb is clicked
    get clicked() {
        return fromEvent(this.thumbElement, 'mousedown', { passive: true }).pipe(stopPropagation());
    }
    // Calculate and update thumb position and size
    update() {
        const size = calculateThumbSize(this.track.size, this.viewportScrollSize, this.cmp.minThumbSize);
        const position = calculateThumbPosition(this.viewportScrollOffset, this.viewportScrollMax, this.trackMax);
        animationFrameScheduler.schedule(() => this.updateStyles(this.handleDirection(position, this.trackMax), size));
    }
    /**
     * Stream that emits the 'scrollTo' position when a scrollbar thumb element is dragged
     * This function is called by thumb drag event using viewport or scrollbar pointer events
     */
    dragged(event) {
        let trackMaxStart;
        let scrollMaxStart;
        const dragStart = of(event).pipe(preventSelection(this.document), tap(() => {
            // Capture scrollMax and trackMax once
            trackMaxStart = this.trackMax;
            scrollMaxStart = this.viewportScrollMax;
            this.setDragging(true);
        }));
        const dragging = fromEvent(this.document, 'mousemove', { capture: true, passive: true }).pipe(stopPropagation());
        const dragEnd = fromEvent(this.document, 'mouseup', { capture: true }).pipe(stopPropagation(), enableSelection(this.document), tap(() => this.setDragging(false)));
        return dragStart.pipe(pluck(this.pageProperty), map((pageOffset) => pageOffset - this.dragStartOffset), mergeMap((mouseDownOffset) => dragging.pipe(pluck(this.clientProperty), 
        // Calculate how far the pointer is from the top/left of the scrollbar (minus the dragOffset).
        map((mouseOffset) => mouseOffset - this.track.offset), map((offset) => scrollMaxStart * (offset - mouseDownOffset) / trackMaxStart), map((position) => this.handleDrag(position, scrollMaxStart)), tap((position) => this.scrollTo(position)), takeUntil(dragEnd))));
    }
}
ThumbAdapter.decorators = [
    { type: Directive }
];
ThumbAdapter.ctorParameters = () => [
    { type: NgScrollbar },
    { type: TrackAdapter },
    { type: HTMLElement },
    { type: undefined }
];
ThumbAdapter.propDecorators = {
    dragging: [{ type: Output }]
};
/**
 * Calculate scrollbar thumb size
 */
function calculateThumbSize(trackSize, contentSize, minThumbSize) {
    const scrollbarRatio = trackSize / contentSize;
    const thumbSize = scrollbarRatio * trackSize;
    return Math.max(~~thumbSize, minThumbSize);
}
/**
 * Calculate scrollbar thumb position
 */
function calculateThumbPosition(scrollPosition, scrollMax, trackMax) {
    return scrollPosition * trackMax / scrollMax;
}

class TrackXDirective extends TrackAdapter {
    constructor(cmp, trackElement, document) {
        super(cmp, trackElement.nativeElement, document);
        this.cmp = cmp;
        this.document = document;
    }
    get pageProperty() {
        return 'pageX';
    }
    get offset() {
        return this.clientRect.left;
    }
    get size() {
        return this.trackElement.clientWidth;
    }
    mapToScrollToOption(value) {
        return { left: value };
    }
}
TrackXDirective.decorators = [
    { type: Directive, args: [{ selector: '[scrollbarTrackX]' },] }
];
TrackXDirective.ctorParameters = () => [
    { type: NgScrollbar },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
class TrackYDirective extends TrackAdapter {
    constructor(cmp, trackElement, document) {
        super(cmp, trackElement.nativeElement, document);
        this.cmp = cmp;
        this.document = document;
    }
    get pageProperty() {
        return 'pageY';
    }
    get offset() {
        return this.clientRect.top;
    }
    get size() {
        return this.trackElement.clientHeight;
    }
    mapToScrollToOption(value) {
        return { top: value };
    }
}
TrackYDirective.decorators = [
    { type: Directive, args: [{ selector: '[scrollbarTrackY]' },] }
];
TrackYDirective.ctorParameters = () => [
    { type: NgScrollbar },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];

class ThumbXDirective extends ThumbAdapter {
    constructor(cmp, track, element, document, dir) {
        super(cmp, track, element.nativeElement, document);
        this.cmp = cmp;
        this.track = track;
        this.element = element;
        this.document = document;
        this.dir = dir;
    }
    get clientProperty() {
        return 'clientX';
    }
    get pageProperty() {
        return 'pageX';
    }
    get viewportScrollSize() {
        return this.cmp.viewport.scrollWidth;
    }
    get viewportScrollOffset() {
        return this.cmp.viewport.scrollLeft;
    }
    get viewportScrollMax() {
        return this.cmp.viewport.scrollMaxX;
    }
    get dragStartOffset() {
        return this.clientRect.left + this.document.defaultView.pageXOffset || 0;
    }
    get size() {
        return this.thumbElement.clientWidth;
    }
    updateStyles(position, size) {
        this.thumbElement.style.width = `${size}px`;
        this.thumbElement.style.transform = `translate3d(${position}px, 0, 0)`;
    }
    handleDrag(position, scrollMax) {
        if (this.dir.value === 'rtl') {
            if (this.cmp.manager.rtlScrollAxisType === 1 /* NEGATED */) {
                return position - scrollMax;
            }
            if (this.cmp.manager.rtlScrollAxisType === 2 /* INVERTED */) {
                return scrollMax - position;
            }
            // Keeping this as a memo
            // if (this.rtlScrollAxisType === RtlScrollAxisType.NORMAL) {
            //   return position;
            // }
        }
        return position;
    }
    handleDirection(position, trackMax) {
        if (this.dir.value === 'rtl') {
            if (this.cmp.manager.rtlScrollAxisType === 2 /* INVERTED */) {
                return -position;
            }
            if (this.cmp.manager.rtlScrollAxisType === 0 /* NORMAL */) {
                return position - trackMax;
            }
            // Keeping this as a memo
            // if (this.rtlScrollAxisType === RtlScrollAxisType.NEGATED) {
            //   return position;
            // }
        }
        return position;
    }
    setDragging(value) {
        this.cmp.setDragging({ horizontalDragging: value });
    }
    scrollTo(position) {
        this.cmp.viewport.scrollXTo(position);
    }
}
ThumbXDirective.decorators = [
    { type: Directive, args: [{ selector: '[scrollbarThumbX]' },] }
];
ThumbXDirective.ctorParameters = () => [
    { type: NgScrollbar },
    { type: TrackXDirective },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Directionality }
];
class ThumbYDirective extends ThumbAdapter {
    constructor(cmp, track, element, document) {
        super(cmp, track, element.nativeElement, document);
        this.cmp = cmp;
        this.track = track;
        this.element = element;
        this.document = document;
    }
    get pageProperty() {
        return 'pageY';
    }
    get viewportScrollSize() {
        return this.cmp.viewport.scrollHeight;
    }
    get viewportScrollOffset() {
        return this.cmp.viewport.scrollTop;
    }
    get viewportScrollMax() {
        return this.cmp.viewport.scrollMaxY;
    }
    get clientProperty() {
        return 'clientY';
    }
    get dragStartOffset() {
        return this.clientRect.top + this.document.defaultView.pageYOffset || 0;
    }
    get size() {
        return this.thumbElement.clientHeight;
    }
    updateStyles(position, size) {
        this.thumbElement.style.height = `${size}px`;
        this.thumbElement.style.transform = `translate3d(0px, ${position}px, 0)`;
    }
    handleDrag(position) {
        return position;
    }
    handleDirection(position) {
        return position;
    }
    setDragging(value) {
        this.cmp.setDragging({ verticalDragging: value });
    }
    scrollTo(position) {
        this.cmp.viewport.scrollYTo(position);
    }
}
ThumbYDirective.decorators = [
    { type: Directive, args: [{ selector: '[scrollbarThumbY]' },] }
];
ThumbYDirective.ctorParameters = () => [
    { type: NgScrollbar },
    { type: TrackYDirective },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];

// @dynamic
class Scrollbar {
    constructor(el, cmp, platform, document, zone) {
        this.el = el;
        this.cmp = cmp;
        this.platform = platform;
        this.document = document;
        this.zone = zone;
        // Stream that emits to unsubscribe from all streams
        this.destroyed = new Subject();
    }
    /**
     * Activate scrollbar pointer events
     */
    activatePointerEvents() {
        // Stream that emits when scrollbar thumb is dragged
        let thumbDragEvent;
        // Stream that emits when scrollbar track is clicked
        let trackClickEvent;
        // Stream that emits when scrollbar track is hovered
        let trackHoveredEvent;
        // Set the method used for the pointer events option
        if (this.cmp.pointerEventsMethod === 'viewport') {
            // Pointer events using the viewport
            this.viewportTrackClicked = new Subject();
            this.viewportThumbClicked = new Subject();
            // Activate the pointer events of the viewport directive
            this.cmp.viewport.activatePointerEvents(this.cmp.viewportPropagateMouseMove, this.destroyed);
            // Set streams
            thumbDragEvent = this.viewportThumbClicked;
            trackClickEvent = this.viewportTrackClicked;
            trackHoveredEvent = this.cmp.viewport.hovered.pipe(
            // Check if track is hovered
            map((e) => isWithinBounds(e, this.el.getBoundingClientRect())), distinctUntilChanged(), 
            // Enable / disable text selection
            tap((hovered) => this.document.onselectstart = hovered ? () => false : null));
            this.cmp.viewport.clicked.pipe(tap((e) => {
                if (e) {
                    if (isWithinBounds(e, this.thumb.clientRect)) {
                        this.viewportThumbClicked.next(e);
                    }
                    else if (isWithinBounds(e, this.track.clientRect)) {
                        this.cmp.setClicked(true);
                        this.viewportTrackClicked.next(e);
                    }
                }
                else {
                    this.cmp.setClicked(false);
                }
            }), takeUntil(this.destroyed)).subscribe();
        }
        else {
            // Pointer events method is using 'scrollbar'
            thumbDragEvent = this.thumb.clicked;
            trackClickEvent = this.track.clicked;
            trackHoveredEvent = this.hovered;
        }
        return merge(
        // Activate scrollbar hovered event
        trackHoveredEvent.pipe(tap((e) => this.setHovered(e))), 
        // Activate scrollbar thumb drag event
        thumbDragEvent.pipe(switchMap((e) => this.thumb.dragged(e))), 
        // Activate scrollbar track click event
        trackClickEvent.pipe(switchMap((e) => this.track.onTrackClicked(e, this.thumb.size, this.viewportScrollSize))));
    }
    // Stream that emits when the track element is hovered
    get hovered() {
        const mouseEnter = fromEvent(this.el, 'mouseenter', { passive: true }).pipe(stopPropagation(), map(() => true));
        const mouseLeave = fromEvent(this.el, 'mouseleave', { passive: true }).pipe(stopPropagation(), map(() => false));
        return merge(mouseEnter, mouseLeave);
    }
    ngOnInit() {
        this.zone.runOutsideAngular(() => {
            // Activate pointer events on Desktop only
            if (!(this.platform.IOS || this.platform.ANDROID) && !this.cmp.pointerEventsDisabled) {
                this.activatePointerEvents().pipe(takeUntil(this.destroyed)).subscribe();
            }
            // Update scrollbar thumb when viewport is scrolled and when scrollbar component is updated
            merge(this.cmp.scrolled, this.cmp.updated).pipe(tap(() => { var _a; return (_a = this.thumb) === null || _a === void 0 ? void 0 : _a.update(); }), takeUntil(this.destroyed)).subscribe();
        });
    }
    ngOnDestroy() {
        this.destroyed.next();
        this.destroyed.complete();
        // Clean up viewport streams if used
        if (this.viewportThumbClicked && this.viewportTrackClicked) {
            this.viewportTrackClicked.complete();
            this.viewportThumbClicked.complete();
        }
    }
}
Scrollbar.decorators = [
    { type: Directive }
];
Scrollbar.ctorParameters = () => [
    { type: HTMLElement },
    { type: NgScrollbar },
    { type: Platform },
    { type: undefined },
    { type: NgZone }
];

class ScrollbarY extends Scrollbar {
    constructor(el, cmp, platform, document, zone) {
        super(el.nativeElement, cmp, platform, document, zone);
        this.cmp = cmp;
        this.platform = platform;
        this.document = document;
        this.zone = zone;
    }
    get viewportScrollSize() {
        return this.cmp.viewport.scrollHeight;
    }
    setHovered(value) {
        this.cmp.setHovered({ verticalHovered: value });
    }
}
ScrollbarY.decorators = [
    { type: Component, args: [{
                selector: 'scrollbar-y',
                host: { '[class.scrollbar-control]': 'true' },
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <div scrollbarTrackY class="ng-scrollbar-track {{cmp.trackClass}}">
      <div scrollbarThumbY class="ng-scrollbar-thumb {{cmp.thumbClass}}"></div>
    </div>
  `,
                styles: ["::ng-deep .ng-scrollbar-wrapper>scrollbar-y.scrollbar-control{width:var(--vertical-scrollbar-total-size)}::ng-deep .ng-scrollbar-wrapper>scrollbar-y.scrollbar-control>.ng-scrollbar-track{width:var(--vertical-scrollbar-size);height:calc(100% - var(--scrollbar-padding) * 2)}::ng-deep .ng-scrollbar-wrapper>scrollbar-y.scrollbar-control>.ng-scrollbar-track>.ng-scrollbar-thumb{height:0;width:100%}::ng-deep .ng-scrollbar-wrapper[verticalDragging=true]>scrollbar-y.scrollbar-control .ng-scrollbar-thumb,::ng-deep .ng-scrollbar-wrapper[verticalHovered=true]>scrollbar-y.scrollbar-control .ng-scrollbar-thumb{background-color:var(--scrollbar-thumb-hover-color)}::ng-deep .ng-scrollbar-wrapper[deactivated=false]>scrollbar-y.scrollbar-control{top:0;bottom:0}::ng-deep .ng-scrollbar-wrapper[deactivated=false][dir=ltr]>scrollbar-y.scrollbar-control{right:0;left:unset}::ng-deep .ng-scrollbar-wrapper[deactivated=false][dir=ltr][position=invertAll]>scrollbar-y.scrollbar-control,::ng-deep .ng-scrollbar-wrapper[deactivated=false][dir=ltr][position=invertY]>scrollbar-y.scrollbar-control{left:0;right:unset}::ng-deep .ng-scrollbar-wrapper[deactivated=false][dir=rtl]>scrollbar-y.scrollbar-control{left:0;right:unset}::ng-deep .ng-scrollbar-wrapper[deactivated=false][dir=rtl][position=invertAll]>scrollbar-y.scrollbar-control,::ng-deep .ng-scrollbar-wrapper[deactivated=false][dir=rtl][position=invertY]>scrollbar-y.scrollbar-control{left:unset;right:0}::ng-deep .ng-scrollbar-wrapper[deactivated=false][track=all]>scrollbar-y.scrollbar-control[fit=true]{bottom:var(--scrollbar-total-size);top:0}::ng-deep .ng-scrollbar-wrapper[deactivated=false][track=all][position=invertAll]>scrollbar-y.scrollbar-control[fit=true],::ng-deep .ng-scrollbar-wrapper[deactivated=false][track=all][position=invertX]>scrollbar-y.scrollbar-control[fit=true]{top:var(--scrollbar-total-size);bottom:0}"]
            },] }
];
ScrollbarY.ctorParameters = () => [
    { type: ElementRef },
    { type: NgScrollbar },
    { type: Platform },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: NgZone }
];
ScrollbarY.propDecorators = {
    track: [{ type: ViewChild, args: [TrackYDirective, { static: true },] }],
    thumb: [{ type: ViewChild, args: [ThumbYDirective, { static: true },] }]
};
class ScrollbarX extends Scrollbar {
    constructor(el, cmp, platform, document, zone) {
        super(el.nativeElement, cmp, platform, document, zone);
        this.cmp = cmp;
        this.platform = platform;
        this.document = document;
        this.zone = zone;
    }
    get viewportScrollSize() {
        return this.cmp.viewport.scrollWidth;
    }
    setHovered(value) {
        this.cmp.setHovered({ horizontalHovered: value });
    }
}
ScrollbarX.decorators = [
    { type: Component, args: [{
                selector: 'scrollbar-x',
                host: { '[class.scrollbar-control]': 'true' },
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <div scrollbarTrackX class="ng-scrollbar-track {{cmp.trackClass}}">
      <div scrollbarThumbX class="ng-scrollbar-thumb {{cmp.thumbClass}}"></div>
    </div>
  `,
                styles: ["::ng-deep .ng-scrollbar-wrapper>scrollbar-x.scrollbar-control{height:var(--horizontal-scrollbar-total-size)}::ng-deep .ng-scrollbar-wrapper>scrollbar-x.scrollbar-control>.ng-scrollbar-track{height:var(--horizontal-scrollbar-size);width:calc(100% - var(--scrollbar-padding) * 2)}::ng-deep .ng-scrollbar-wrapper>scrollbar-x.scrollbar-control>.ng-scrollbar-track>.ng-scrollbar-thumb{width:0;height:100%}::ng-deep .ng-scrollbar-wrapper[horizontalDragging=true]>scrollbar-x.scrollbar-control .ng-scrollbar-thumb,::ng-deep .ng-scrollbar-wrapper[horizontalHovered=true]>scrollbar-x.scrollbar-control .ng-scrollbar-thumb{background-color:var(--scrollbar-thumb-hover-color)}::ng-deep .ng-scrollbar-wrapper[position=invertAll]>scrollbar-x.scrollbar-control,::ng-deep .ng-scrollbar-wrapper[position=invertX]>scrollbar-x.scrollbar-control{top:0;bottom:unset}::ng-deep .ng-scrollbar-wrapper[deactivated=false]>scrollbar-x.scrollbar-control{left:0;right:0;bottom:0;top:unset}::ng-deep .ng-scrollbar-wrapper[deactivated=false][position=invertAll]>scrollbar-x.scrollbar-control,::ng-deep .ng-scrollbar-wrapper[deactivated=false][position=invertX]>scrollbar-x.scrollbar-control{top:0;bottom:unset}::ng-deep .ng-scrollbar-wrapper[deactivated=false][track=all][dir=ltr]>scrollbar-x.scrollbar-control[fit=true]{right:var(--scrollbar-total-size);left:0}::ng-deep .ng-scrollbar-wrapper[deactivated=false][track=all][dir=ltr][position=invertAll]>scrollbar-x.scrollbar-control[fit=true],::ng-deep .ng-scrollbar-wrapper[deactivated=false][track=all][dir=ltr][position=invertY]>scrollbar-x.scrollbar-control[fit=true]{left:var(--scrollbar-total-size);right:0}::ng-deep .ng-scrollbar-wrapper[deactivated=false][track=all][dir=rtl]>scrollbar-x.scrollbar-control[fit=true]{left:var(--scrollbar-total-size);right:0}::ng-deep .ng-scrollbar-wrapper[deactivated=false][track=all][dir=rtl][position=invertAll]>scrollbar-x.scrollbar-control[fit=true],::ng-deep .ng-scrollbar-wrapper[deactivated=false][track=all][dir=rtl][position=invertY]>scrollbar-x.scrollbar-control[fit=true]{right:var(--scrollbar-total-size);left:0}"]
            },] }
];
ScrollbarX.ctorParameters = () => [
    { type: ElementRef },
    { type: NgScrollbar },
    { type: Platform },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: NgZone }
];
ScrollbarX.propDecorators = {
    track: [{ type: ViewChild, args: [TrackXDirective, { static: true },] }],
    thumb: [{ type: ViewChild, args: [ThumbXDirective, { static: true },] }]
};

class NgScrollbarModule {
    static withConfig(options) {
        return {
            ngModule: NgScrollbarModule,
            providers: [
                { provide: NG_SCROLLBAR_OPTIONS, useValue: options }
            ]
        };
    }
}
NgScrollbarModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    BidiModule,
                    PortalModule,
                    PlatformModule,
                    SmoothScrollModule
                ],
                declarations: [
                    NgScrollbar,
                    ScrollViewport,
                    HideNativeScrollbar,
                    NgAttr,
                    ResizeSensor,
                    ThumbYDirective,
                    ThumbXDirective,
                    TrackXDirective,
                    TrackYDirective,
                    ScrollbarY,
                    ScrollbarX
                ],
                exports: [
                    NgScrollbar,
                    ScrollViewport
                ]
            },] }
];

/*
 * Public API Surface of ngx-scrollbar
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NG_SCROLLBAR_OPTIONS, NgScrollbar, NgScrollbarModule, ScrollViewport, ScrollbarManager, HideNativeScrollbar as ɵa, NativeScrollbarSizeFactory as ɵb, NgAttr as ɵc, ResizeSensor as ɵd, ThumbXDirective as ɵe, ThumbYDirective as ɵf, ThumbAdapter as ɵg, TrackAdapter as ɵh, TrackXDirective as ɵi, TrackYDirective as ɵj, ScrollbarY as ɵk, ScrollbarX as ɵl, Scrollbar as ɵm };
//# sourceMappingURL=ngx-scrollbar.js.map
